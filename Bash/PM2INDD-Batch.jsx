#target indesign#include "../A42LTR.jsx"#include "../clearSpots.jsx"app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;app.scriptPreferences.enableRedraw = false;app.preflightOptions.preflightOff = true;var doc, masterDoc, docUnits, mainStory, mainFrames;var fileList = Folder('~/Erik/PM2INDD/QUEUE/INDD/').getFiles('*.indd');for (var f = 0; f < fileList.length; f++){	doc = app.open(fileList[f]);	try {		mainStory = findChangeGrep({'findWhat':'', 'appliedParagraphStyle':doc.paragraphStyles.item('RUNNING THE')}, undefined, {'includeLockedStoriesForFind':true, 'includeLockedLayersForFind':true})[0].parentStory;	}	catch (e){		mainStory = findChangeGrep({'findWhat':'DRIL-QUIP'}, undefined, {'includeLockedStoriesForFind':true, 'includeLockedLayersForFind':true})[0].parentStory;	}	if (problemTest() == 'OK') PM2INDD();	else {		doc.close(SaveOptions.NO);		app.doScript('do shell script "mv ' + fileList[f] + ' ' + fileList[f].toString().replace(/INDD/, 'PROBLEMS/SPLIT/') + '"', ScriptLanguage.APPLESCRIPT_LANGUAGE);	}}function PM2INDD(doc){	masterDoc = doc.masterSpreads[0];			docUnits = doc.viewPreferences.horizontalMeasurementUnits = doc.viewPreferences.verticalMeasurementUnits;	doc.viewPreferences.properties = {rulerOrigin:RulerOrigin.spreadOrigin, showFrameEdges:true, showRulers:true, horizontalMeasurementUnits:MeasurementUnits.POINTS, verticalMeasurementUnits:MeasurementUnits.POINTS};	app.textWrapPreferences.textWrapMode = doc.textWrapPreferences.textWrapMode = TextWrapModes.none;	doc.textPreferences.showInvisibles = true;	doc.guidePreferences.properties = {guidesInBack:true, guidesShown:true, guidesSnapto:true};	doc.marginPreferences.properties = {top:54, left:72, bottom:54, right:54};	try {		mainStory = findChangeGrep({'findWhat':'', 'appliedParagraphStyle':doc.paragraphStyles.item('RUNNING THE')}, undefined, {'includeLockedStoriesForFind':true, 'includeLockedLayersForFind':true})[0].parentStory;	}	catch (e){		mainStory = findChangeGrep({'findWhat':'DRIL-QUIP'}, undefined, {'includeLockedStoriesForFind':true, 'includeLockedLayersForFind':true})[0].parentStory;	}	if (mainStory.textContainers.length == 1){		throw Error('Skipped due to main story\'s paragraphs each having its own text frame');	}	mainFrames = mainStory.textContainers;	layersAndText();	docSetup();	fixGroups();	fixFrames();	noteBoxes();}function layersAndText(){	doc.layers.everyItem().locked = false;	var tempLayer = doc.layers.add({'name':'tempLayer'});	tempLayer.merge(doc.layers.itemByRange(0, doc.layers.length - 2));	tempLayer.properties = {'layerColor':UIColors.red, 'locked':false, 'name':'Default', 'printable':true, 'showGuides':true, 'visible':true};	doc.layers.add({'layerColor':UIColors.blue, 'locked':false, 'name':'Master Default', 'printable':true, 'showGuides':true, 'visible':true};	var items = doc.pageItems.everyItem().getElements();	for (var i = items.length - 1; i >= 0; i--){		var item = items[i];		if (item.hasOwnProperty('locked')) item.locked = false;		if (item.parentPage == null) {			item.remove();		}		else {			if (item.allPageItems.length == 0 && (item.fillColor.name == '' || item.strokeColor.name == '')){				if (item.fillColor.name == '' && item.fillColor.colorValue.slice(0, 3) == '0,0,0' && item.fillColor.colorValue[3] > 0){					item.properties = {fillColor:'Black', fillTint:item.fillColor.colorValue[3]};				}				if (item.strokeColor.name == '' && item.strokeColor.colorValue.slice(0, 3) == '0,0,0' && item.strokeColor.colorValue[3] > 0){					item.properties = {strokeColor:'Black', strokeTint:item.strokeColor.colorValue[3]};				}			}		}	}	masterDoc.pageItems.everyItem().itemLayer = doc.layers.item('Master Default');	findChangeGrep({'findWhat':'~b~b+'}, {'changeTo':'\r'});	findChangeGrep({'findWhat':'[~m~>~f~|~S~s~<~/~.~3~4~% ]{2,}'}, {'changeTo':' '}, {'includeMasterPages':true});	findChangeGrep({'findWhat':'^\\s+|\\s+\$'}, {'changeTo':''}, {'includeMasterPages':true});	findChangeGrep({'findWhat':'(?i)^(note|caution|warning)(?:\\s+)?:'}, {'changeTo':'$1:'});	findChangeGrep({'findWhat':'(?i)(?<= )figure (\\d+)'}, {'changeTo':'Figure $1', 'fontStyle':'Bold'});}/*	findChangeGrep({'findWhat':'(?i)^(?<=(note|caution|warning).+)\\r(?<!note|caution|warning)(.+)', 'appliedParagraphStyle':doc.paragraphStyles.item('Note')}, {'changeTo':' $1'}, {'includeMasterPages':true});	findChangeGrep({'findWhat':'(?i)^' + /^[^\\d]+/.exec(doc.name) + ') ?(\\d{3})[^\\d]', 'appliedParagraphStyle':doc.paragraphStyles.item('footer')}, {'changeTo':'$1 0$2'}, {'includeMasterPages':true});	findChangeGrep({'findWhat':'(?i)^(tools needed for this operation)(\\s|\\r)+'}, {'changeTo':'$1\\r', 'appliedParagraphStyle':doc.paragraphStyles.item('Level 2 (Tools)')});	findChangeGrep({'findWhat':'(?i)^(pre-operational procedures|running procedures|retrieving procedures|post-operational procedures)(\\s|\\r)+'}, {'changeTo':'$1\\r', 'appliedParagraphStyle':doc.paragraphStyles.item('Level 2')});*/function problemTest(){	if (doc.documentPreferences.pageSize !== 'Letter') A42LTR(doc);	try {		var level2 = findChangeGrep({'findWhat':'', 'appliedParagraphStyle':doc.paragraphStyles.item('Level 2')}, undefined);		if (level2.length == 0 || level2[0].parentStory !== mainStory) return 'SPLIT';	}	catch (e){		return 'SPLIT';	}	return 'OK';}function fixGroups(){	for (var g = 0; g < doc.graphics.length; g++){		var art = doc.graphics[g].parent;		art.sendToBack();		if (/\d+/.exec(art.parentPage.name) && art.parent.constructor.name !== 'Group' && art.textWrapPreferences.textWrap !== TextWrapModes.NONE){			var offsets = art.textWrapPreferences.textWrapOffset;			if (offsets.length == 4){				var bounds = [art.geometricBounds[0] - offsets[0], art.geometricBounds[1] - offsets[1], art.geometricBounds[2] + offsets[2], art.geometricBounds[3] + offsets[3]];				var grp = [];				var spread = art.parentPage.parent;				for (var i = 0; i < spread.pageItems.length; i++){					var iBounds = spread.pageItems[i].geometricBounds;					if (iBounds[0] > bounds[0] && iBounds[1] > bounds[1] && iBounds[2] < bounds[2] && iBounds[3] < bounds[3])						grp.push(spread.pageItems[i]);				}				grp = spread.groups.add(grp);			}		}		if (/\d+/.exec(art.parentPage.name) && art.parent instanceof Group){			var group = art.parent;			for (var i = 0; i < group.allPageItems.length; i++){				group.allPageItems[i].textWrapPreferences.textWrapMode = TextWrapModes.NONE;			}			var xGutter = (group.parentPage.documentOffset % 2 == 0) ? group.parentPage.bounds[0] + doc.marginPreferences.left + 126 : group.parentPage.bounds[0] + doc.marginPreferences.right + 126;			if (group.geometricBounds[3] < xGutter){				group.textWrapPreferences.textWrapMode = TextWrapModes.none;			}			else if (group.geometricBounds[1] < (group.parentPage.bounds[1]+group.parentPage.bounds[3])/2){				group.textWrapPreferences.textWrapMode = TextWrapModes.jumpObjectTextWrap;				group.textWrapPreferences.textWrapOffset = [9,9,9,9];			}			else {				item.textWrapPreferences.textWrapMode = TextWrapModes.boundingBoxTextWrap;				item.textWrapPreferences.textWrapOffset = [9,9,9,9];			}		}	}}function findChangeGrep(findPrefs, changePrefs, findChangeOptions){	app.findChangeGrepOptions = app.findGrepPreferences = app.changeGrepPreferences = NothingEnum.nothing;	if (findChangeOptions !== undefined){		app.findChangeGrepOptions.properties = findChangeOptions;	}	app.findGrepPreferences.properties = findPrefs;	if (changePrefs == undefined){		return doc.findGrep();	}	else {		app.changeGrepPreferences.properties = changePrefs;		doc.changeGrep();	}}function between(num, lo, hi){	return (num - lo) * (num - hi) <= 0;}